/*
 * WebOSQuickInstallAboutBox.java
 */

package ca.canucksoftware.novacominstaller;

import ca.canucksoftware.novacom.NovacomDrivers;
import ca.canucksoftware.utils.FileUtils;
import java.net.HttpURLConnection;
import java.util.Timer;
import java.util.TimerTask;
import java.net.URL;
import java.net.URLConnection;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import javax.swing.JOptionPane;
import java.text.NumberFormat;


public class DoctorDownloader extends javax.swing.JDialog {
    private final String NEWEST = "http://webosdoctor-url-generator.googlecode" +
            ".com/svn/trunk/webOSDoctor%20URL%20Generator/current.txt";
    private Timer t;
    private boolean downloadStarted;
    private String url;
    private File doctor;
    private int maxSize;
    public boolean cancel;
    NumberFormat nf;

    public DoctorDownloader(java.awt.Frame parent) {
        super(parent);
        initComponents();
        t = new Timer();
        downloadStarted = false;
        url = getURL();
        doctor = new File(FileUtils.appDirectory(), "webOSDoctor"
                + System.currentTimeMillis() + ".jar");
        maxSize = 202910;
        nf = NumberFormat.getNumberInstance();
        nf.setGroupingUsed(false);
        nf.setMaximumFractionDigits(2);
        cancel = false;
    }

    public String getURL() {
        String result = null;
        URLConnection urlCon = null;
        try {
            urlCon = new URL(NEWEST).openConnection();
            urlCon.setRequestProperty("Content-Type", "text/plain");
            BufferedInputStream bis = new BufferedInputStream(urlCon.getInputStream());
            BufferedReader br = new BufferedReader(new InputStreamReader(bis));
            String line = br.readLine();
            if(line!=null) {
                result = line.trim();
            }
            br.close();
        } catch(Exception e) {
            e.printStackTrace();
        }
        return result;
    }

    private String getName(String s) {
        return s.substring(s.lastIndexOf("/")+1);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jButton1 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ca.canucksoftware.novacominstaller.NovacomInstallerApp.class).getContext().getResourceMap(DoctorDownloader.class);
        setBackground(resourceMap.getColor("transfer.background")); // NOI18N
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        setForeground(resourceMap.getColor("transfer.foreground")); // NOI18N
        setIconImage(null);
        setModal(true);
        setName("transfer"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLayeredPane1.setBackground(resourceMap.getColor("jLayeredPane1.background")); // NOI18N
        jLayeredPane1.setForeground(resourceMap.getColor("jLayeredPane1.foreground")); // NOI18N
        jLayeredPane1.setName("jLayeredPane1"); // NOI18N
        jLayeredPane1.setOpaque(true);

        jButton1.setFont(jButton1.getFont());
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.setBounds(110, 110, 79, 25);
        jLayeredPane1.add(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jProgressBar1.setFont(jProgressBar1.getFont());
        jProgressBar1.setName("jProgressBar1"); // NOI18N
        jProgressBar1.setStringPainted(true);
        jProgressBar1.setBounds(50, 60, 200, 30);
        jLayeredPane1.add(jProgressBar1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getSize()+1f));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jLabel1.setBounds(30, 10, 240, 40);
        jLayeredPane1.add(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    }//GEN-LAST:event_formWindowOpened

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if(!downloadStarted) {
            t.schedule(new DoDownload(), 100);
            downloadStarted = true;
        }
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    }//GEN-LAST:event_formWindowClosed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        cancel = true;
    }//GEN-LAST:event_jButton1ActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables

    class DoDownload extends TimerTask  {
        public void run() {
            t.cancel();
            try {
                int count;
                int kbCount = 0;
                double percent = 0;
                BufferedInputStream in;
                FileOutputStream fos;
                BufferedOutputStream bout;
                byte data[] = new byte[1024];
                HttpURLConnection urlCon = null;
                kbCount = 0;
                count = 0;
                if(maxSize>0)
                    jProgressBar1.setMaximum(maxSize);
                urlCon = (HttpURLConnection) new URL(url).openConnection();
                urlCon.setInstanceFollowRedirects(true);
                urlCon.setRequestProperty("REFERER",url);
                if(urlCon.getContentLength()>-1) {
                    maxSize = urlCon.getContentLength()/1024;
                    jProgressBar1.setMaximum(maxSize);
                }
                urlCon.connect();
                in = new BufferedInputStream(urlCon.getInputStream());
                fos = new FileOutputStream(doctor);
                bout = new BufferedOutputStream(fos);

                while(((count = in.read(data)) != -1)&&!cancel) {
                    if(maxSize>0) {
                        percent = ((double)kbCount/(double)maxSize)*100.0;
                        if((int)Math.ceil(percent)>100) {
                            jLabel1.setText("<html>" + "Processing finished download. This may take a few minutes.");
                            jProgressBar1.setString("100%");
                        } else {
                            jProgressBar1.setString((int)Math.ceil(percent) + "%");
                        }
                        jProgressBar1.setValue(kbCount);
                    } else {
                        if(kbCount<1000)
                            jProgressBar1.setString(kbCount + " KB");
                        else
                            jProgressBar1.setString(nf.format(kbCount/1024) + " MB");
                    }
                    kbCount++;
                    bout.write(data,0,count);
                }
                bout.flush();
                fos.close();
                bout.close();
                in.close();
                if(cancel) {
                    doctor.delete();
                }
                urlCon.disconnect();
                jLabel1.setText("<html>" + "Installing driver...");
                NovacomDrivers driver = new NovacomDrivers(doctor);
                if(driver.install()) {
                    doctor.delete();
                    JOptionPane.showMessageDialog(rootPane, "Driver installed successfully.");
                    System.gc();
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "ERROR: Driver installation failed");
                    System.exit(0);
                }
            } catch(Exception e) {
                JOptionPane.showMessageDialog(rootPane, "ERROR:" + "\n\n" + e.getMessage());
                e.printStackTrace();
                System.exit(0);
            }
            
        }
    }
}
